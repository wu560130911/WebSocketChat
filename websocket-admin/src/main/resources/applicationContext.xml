<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util"
	default-lazy-init="false" xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- <context:property-placeholder location="classpath:db.properties" /> -->
	<util:properties id="props" location="classpath:system.properties" />
	<!--property configure本配置文件负责加载变量信息必须在在spring配置文件的最前面加载（第一个加载） -->
	<!--载入properties配置文件，以${key}的方式引用 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:system.properties</value>
			</list>
		</property>
	</bean>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:annotation-config />

	<context:component-scan base-package="com.wms.studio">
	</context:component-scan>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClassName" value="${database.driverClassName}" />
		<!-- 相应驱动的jdbcUrl -->
		<property name="url" value="${database.url}" />
		<!-- 数据库的用户名 -->
		<property name="username" value="${database.username}" />
		<!-- 数据库的密码 -->
		<property name="password" value="${database.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="1440000" />

		<property name="testWhileIdle" value="false" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 定期把监控数据输出到日志中 -->
		<property name="timeBetweenLogStatsMillis" value="300000" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- <property name="poolPreparedStatements" value="true" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="config,stat,log4j" />
		<property name="connectionProperties" value="config.decrypt=true" />
	</bean>

	<!-- 设置为NONE时，不忽略任何错误 设置为DROPS时，忽略删除错误 设置为ALL时，忽略任何错误 -->
	<jdbc:initialize-database data-source="dataSource"
		ignore-failures="ALL" enabled="${system.INITIALIZE_DATABASE}">
		<jdbc:script encoding="UTF-8" location="classpath:scripts/sqls/db-init.sql" />
		<!-- <jdbc:script encoding="UTF-8" location="classpath:scripts/sqls/import-data.sql"/> -->
	</jdbc:initialize-database>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:mappers/**/*.xml" />
		<!-- <property name="typeAliasesPackage" value="com.wms.studio.entity" 
			/> -->
		<property name="configLocation" value="mybatis/config.xml"></property>
	</bean>

	<bean id="sqlSessionBatch" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="BATCH" />
	</bean>

	<bean id="sqlSessionSimple" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="SIMPLE" />
	</bean>

	<bean id="mapperScannerConfigurerSimple" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wms.studio.mapper" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionSimple"></property>
		<property name="markerInterface"
			value="com.wms.studio.mybatis.SimpleSqlSessionTemplate"></property>
	</bean>

	<!-- 批量操作 -->
	<bean id="mapperScannerConfigurerBatch" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wms.studio.mapper" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionBatch"></property>
		<property name="markerInterface"
			value="com.wms.studio.mybatis.BatchSqlSessionTemplate"></property>
	</bean>

	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- This will ensure that hibernate or jpa exceptions are automatically 
		translated into Spring's generic DataAccessException hierarchy for those 
		classes annotated with Repository -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor">
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	</tx:advice>

	<aop:config>
		<aop:pointcut expression="execution(* com.wms.studio.service.*.*(..))"
			id="allMagangerMethod" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allMagangerMethod" />
	</aop:config>
	<!-- To enable @AspectJ support with XML based configuration use the aop:aspectj-autoproxy 
		element: -->
	<aop:aspectj-autoproxy />

	<bean id="springContextHelper" class="com.wms.studio.utils.SpringContextHelper">
	</bean>

	<bean id="handlerAnnotationFactoryBean" class="com.wms.studio.annotations.HandlerAnnotationFactoryBean"
		init-method="init">
		<constructor-arg value="com.wms.studio.service.handler"></constructor-arg>
		<constructor-arg>
			<list>
				<value>com.wms.studio.annotations.Handler</value>
			</list>
		</constructor-arg>
	</bean>

</beans>